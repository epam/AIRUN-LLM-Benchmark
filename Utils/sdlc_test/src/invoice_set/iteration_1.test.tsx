import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';

// Import the component that was generated by AI
let ComponentToTest: React.ComponentType<any>;

try {
  const componentModule = require('./component');
  ComponentToTest = componentModule.default || componentModule.InvoiceDashboard;
} catch (error) {
  console.error('Failed to import component:', error);
  ComponentToTest = () => <div>Component not found</div>;
}

describe('Iteration 1: Basic Component Functionality', () => {
  
  beforeEach(() => {
    // Mock successful API response
    (global.fetch as jest.Mock).mockResolvedValue({
      ok: true,
      json: async () => ([
        {
          invoice_id: 'INV-001',
          client_name: 'Test Client',
          amount: 1000,
          due_date: '2024-12-31T00:00:00Z',
          status: 'pending',
          created_at: '2024-01-01T00:00:00Z',
          description: 'Test invoice'
        },
        {
          invoice_id: 'INV-002',
          client_name: 'Another Client',
          amount: 2500,
          due_date: '2024-11-30T00:00:00Z',
          status: 'paid',
          created_at: '2024-01-15T00:00:00Z',
          description: 'Another test invoice'
        }
      ])
    });
  });

  // ✅ CORE REQUIREMENT: Component renders without crashing
  test('Component renders without crashing', () => {
    render(<ComponentToTest />);
    expect(document.body).toBeInTheDocument();
  });

  // ✅ CORE REQUIREMENT: Component has correct name export
  test('Component has correct name export', () => {
    expect(ComponentToTest).toBeDefined();
    expect(typeof ComponentToTest).toBe('function');
  });

  // ✅ CORE REQUIREMENT: Component makes API call to correct endpoint
  test('Component makes API call to correct endpoint', async () => {
    render(<ComponentToTest />);
    
    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledWith(
        expect.stringContaining('dev-alg.shop.ton-industry.com/api/v2/invoices/list')
      );
    });
  });

  // ✅ CORE REQUIREMENT: Component displays invoice data
  test('Component displays invoice data', async () => {
    render(<ComponentToTest />);
    
    await waitFor(() => {
      // Проверяем наличие текста, игнорируя пробелы и переносы
      expect(screen.getByText(/INV-001/, { exact: false })).toBeInTheDocument();
      expect(screen.getByText(/Test Client/, { exact: false })).toBeInTheDocument();
      expect(screen.getByText(/1000/, { exact: false })).toBeInTheDocument();
    });
  });

  // ✅ CORE REQUIREMENT: Component displays data in table format
  test('Component displays invoice data in table format', async () => {
    render(<ComponentToTest />);
    
    // Wait for data to load and check for table elements
    await waitFor(() => {
      // Check for table or list structure
      const tableElement = screen.queryByRole('table') || 
                          document.querySelector('table') ||
                          document.querySelector('[data-testid*="table"]') ||
                          document.querySelector('.table');
      
      expect(tableElement || screen.queryByText('INV-001')).toBeInTheDocument();
    });
  });

  // ✅ CORE REQUIREMENT: Component displays multiple invoice statuses
  test('Component displays invoice statuses', async () => {
    render(<ComponentToTest />);
    
    await waitFor(() => {
      // Check for different status values
      const statusElements = [
        screen.queryByText(/pending/i),
        screen.queryByText(/paid/i),
        screen.queryByText(/overdue/i)
      ];
      
      const hasStatusDisplay = statusElements.some(element => element !== null);
      expect(hasStatusDisplay || screen.queryByText(/INV-/)).toBeInTheDocument();
    });
  });

  // ✅ CORE REQUIREMENT: Component handles empty data response
  test('Component handles empty data response', async () => {
    // Mock empty response
    (global.fetch as jest.Mock).mockResolvedValue({
      ok: true,
      json: async () => []
    });
    
    render(<ComponentToTest />);
    
    await waitFor(() => {
      // Component should handle empty data gracefully
      expect(document.body).toBeInTheDocument();
      // Should not crash and should show some indication of no data
    });
  });

});

// Additional test for component structure validation
describe('Iteration 1: Component Structure', () => {
  
  test('Component exports are properly defined', () => {
    expect(ComponentToTest).toBeDefined();
    expect(typeof ComponentToTest).toBe('function');
  });

  test('Component can be instantiated', () => {
    expect(() => React.createElement(ComponentToTest)).not.toThrow();
  });

});