import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';

// Import the component that was generated by AI
let ComponentToTest: React.ComponentType<any>;

try {
  const componentModule = require('./component');
  ComponentToTest = componentModule.default || componentModule.DataTableComponent;
} catch (error) {
  console.error('Failed to import component:', error);
  ComponentToTest = () => <div>Component not found</div>;
}

describe('Step 2: React-Spinners Library Integration', () => {

  beforeEach(() => {
    // Mock successful API response for /api/users
    (global.fetch as jest.Mock).mockResolvedValue({
      ok: true,
      json: async () => ([
        {
          id: 1,
          name: 'John Doe',
          email: 'john@example.com',
          role: 'admin',
          status: 'active'
        }
      ])
    });
  });

  // ✅ NEW IN STEP 2: React-spinners library integration
  test('Component uses spinner from "react-spinners" library while fetching', async () => {
    // Mock delayed response to catch loading state
    (global.fetch as jest.Mock).mockImplementation(() =>
      new Promise(resolve => setTimeout(() => resolve({
        ok: true,
        json: async () => ([
          {
            id: 1,
            name: 'John Doe',
            email: 'john@example.com',
            role: 'admin',
            status: 'active'
          }
        ])
      }), 100))
    );

    render(<ComponentToTest/>);

    // Check for react-spinners library component usage
    const loaderElements = [
      screen.queryByTestId('loader'),
      screen.queryByTestId('loading'),
    ];

    const hasLoaderComponent = loaderElements.some(element => element !== null);

    if (!hasLoaderComponent) {
      console.warn('No spinner component from "react-spinners" library detected');
    }

    // Component should at least render
    expect(document.body).toBeInTheDocument();

    // Wait for data to load
    await waitFor(() => {
      expect(screen.queryByText(/John Doe/i)).toBeInTheDocument();
    });
  });

  // ✅ NEW IN STEP 2: Loader disappears after data loads
  test('Loader disappears after data is loaded', async () => {
    // Mock delayed response
    (global.fetch as jest.Mock).mockImplementation(() =>
      new Promise(resolve => setTimeout(() => resolve({
        ok: true,
        json: async () => ([
          {
            id: 1,
            name: 'John Doe',
            email: 'john@example.com',
            role: 'admin',
            status: 'active'
          }
        ])
      }), 50))
    );

    render(<ComponentToTest/>);

    // Wait for data to load completely
    await waitFor(() => {
      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
    });

    // After data loads, loader should be gone or hidden
    const loaderElements = [
      screen.queryByTestId('loader'),
      screen.queryByTestId('loading'),
      document.querySelector('.loader:not([style*="display: none"])'),
      document.querySelector('.loading:not([style*="display: none"])'),
      screen.queryByText(/loading/i)
    ];

    const visibleLoaders = loaderElements.filter(element => {
      if (!element) return false;
      const style = window.getComputedStyle(element);
      return style.display !== 'none' && style.visibility !== 'hidden';
    });

    // Data should be visible and loader should be hidden
    expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
  });

  // ✅ NEW IN STEP 2: Component properly imports react-spinners library
  test('Component imports react-spinners library correctly', () => {
    // Check that component is properly structured for spinner usage
    expect(ComponentToTest).toBeDefined();
    expect(typeof ComponentToTest).toBe('function');

    // Component should render without errors when using spinner
    expect(() => render(<ComponentToTest/>)).not.toThrow();
  });

});