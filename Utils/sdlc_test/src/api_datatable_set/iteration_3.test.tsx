import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';

// Import the component that was generated by AI
let ComponentToTest: React.ComponentType<any>;

try {
  const componentModule = require('./component');
  ComponentToTest = componentModule.default || componentModule.DataTableComponent;
} catch (error) {
  console.error('Failed to import component:', error);
  ComponentToTest = () => <div>Component not found</div>;
}

describe('Step 3: Search and Filter Functionality', () => {
  
  beforeEach(() => {
    // Mock successful API response for /api/users with more data for filtering
    (global.fetch as jest.Mock).mockResolvedValue({
      ok: true,
      json: async () => ([
        {
          id: 1,
          name: 'John Doe',
          email: 'john@example.com',
          role: 'admin',
          status: 'active'
        },
        {
          id: 2,
          name: 'Jane Smith',
          email: 'jane@example.com',
          role: 'user',
          status: 'active'
        },
        {
          id: 3,
          name: 'Bob Johnson',
          email: 'bob@example.com',
          role: 'user',
          status: 'inactive'
        },
        {
          id: 4,
          name: 'Alice Brown',
          email: 'alice@example.com',
          role: 'admin',
          status: 'active'
        }
      ])
    });
  });

  // ✅ NEW IN STEP 3: Search input field exists
  test('Component has search input field', async () => {
    render(<ComponentToTest />);
    
    await waitFor(() => {
      const searchElements = [
        screen.queryByPlaceholderText(/search/i),
        screen.queryByLabelText(/search/i),
        screen.queryByTestId('search'),
        screen.queryByTestId('search-input'),
        document.querySelector('input[type="text"]'),
        document.querySelector('input[placeholder*="search"]'),
        document.querySelector('[data-testid*="search"]')
      ];
      
      const hasSearchInput = searchElements.some(element => element !== null);
      expect(hasSearchInput).toBe(true);
    });
  });

  // ✅ NEW IN STEP 3: Search functionality works
  test('Search input filters data correctly', async () => {
    render(<ComponentToTest />);
    
    // Wait for initial data to load
    await waitFor(() => {
      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
      expect(screen.getByText(/Jane Smith/i)).toBeInTheDocument();
    });

    // Find search input
    const searchInput = screen.queryByPlaceholderText(/search/i) ||
                       screen.queryByLabelText(/search/i) ||
                       screen.queryByTestId('search') ||
                       screen.queryByTestId('search-input') ||
                       document.querySelector('input[type="text"]') ||
                       document.querySelector('input[placeholder*="search"]');

    if (searchInput) {
      // Type in search input
      fireEvent.change(searchInput, { target: { value: 'John' } });
      
      await waitFor(() => {
        // Should show John Doe but not Jane Smith
        expect(screen.queryByText(/John Doe/i)).toBeInTheDocument();
        // Jane Smith might be filtered out
        const janeVisible = screen.queryByText(/Jane Smith/i);
        if (janeVisible) {
          console.warn('Search filter may not be working - Jane Smith still visible when searching for "John"');
        }
      });
    } else {
      console.warn('No search input found - search functionality may not be implemented');
      expect(document.body).toBeInTheDocument(); // At least component renders
    }
  });

  // ✅ NEW IN STEP 3: Filter by role functionality
  test('Component has role filter functionality', async () => {
    render(<ComponentToTest />);
    
    // Wait for initial data to load
    await waitFor(() => {
      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
    });

    // Check for filter controls
    const filterElements = [
      screen.queryByText(/filter/i),
      screen.queryByText(/role/i),
      screen.queryByTestId('filter'),
      screen.queryByTestId('role-filter'),
      document.querySelector('select'),
      document.querySelector('[data-testid*="filter"]'),
      document.querySelector('[class*="filter"]')
    ];
    
    const hasFilterControls = filterElements.some(element => element !== null);
    
    if (!hasFilterControls) {
      console.warn('No filter controls detected');
    }
    
    expect(document.body).toBeInTheDocument();
  });

  // ✅ NEW IN STEP 3: Filter by status functionality
  test('Component can filter by status', async () => {
    render(<ComponentToTest />);
    
    // Wait for initial data to load
    await waitFor(() => {
      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
      expect(screen.getByText(/Bob Johnson/i)).toBeInTheDocument();
    });

    // Look for status filter controls
    const statusFilterElements = [
      screen.queryByText(/status/i),
      screen.queryByText(/active/i),
      screen.queryByText(/inactive/i),
      screen.queryByTestId('status-filter'),
      document.querySelector('select[name*="status"]'),
      document.querySelector('[data-testid*="status"]')
    ];
    
    const hasStatusFilter = statusFilterElements.some(element => element !== null);
    
    if (!hasStatusFilter) {
      console.warn('No status filter controls detected');
    }
    
    expect(document.body).toBeInTheDocument();
  });

  // ✅ NEW IN STEP 3: Clear filters functionality
  test('Component has clear filters functionality', async () => {
    render(<ComponentToTest />);
    
    await waitFor(() => {
      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
    });

    // Look for clear/reset buttons
    const clearElements = [
      screen.queryByText(/clear/i),
      screen.queryByText(/reset/i),
      screen.queryByText(/all/i),
      screen.queryByTestId('clear-filters'),
      screen.queryByTestId('reset-filters'),
      document.querySelector('button[type="reset"]'),
      document.querySelector('[data-testid*="clear"]'),
      document.querySelector('[data-testid*="reset"]')
    ];
    
    const hasClearButton = clearElements.some(element => element !== null);
    
    if (!hasClearButton) {
      console.warn('No clear filters button detected');
    }
    
    expect(document.body).toBeInTheDocument();
  });

  // ✅ NEW IN STEP 3: Multiple filters work together
  test('Multiple filters can be applied simultaneously', async () => {
    render(<ComponentToTest />);
    
    await waitFor(() => {
      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
      expect(screen.getByText(/Jane Smith/i)).toBeInTheDocument();
    });

    // Test that multiple filter controls exist and can be used together
    const searchInput = screen.queryByPlaceholderText(/search/i) ||
                       document.querySelector('input[type="text"]');
    
    const filterSelect = document.querySelector('select') ||
                        screen.queryByTestId('filter');

    if (searchInput && filterSelect) {
      // Apply both search and filter
      fireEvent.change(searchInput, { target: { value: 'admin' } });
      
      await waitFor(() => {
        // Should handle multiple filters
        expect(document.body).toBeInTheDocument();
      });
    }
    
    expect(document.body).toBeInTheDocument();
  });

});